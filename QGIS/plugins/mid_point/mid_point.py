# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MidPoint
                                 A QGIS plugin
 The plugin find the central vertex and it generates a point in the middle of the line segment
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-12-12
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Sergi Alvarez Guasch
        email                : sergiguasch83@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mid_point_dialog import MidPointDialog
import os.path


class MidPoint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MidPoint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Mid Point')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MidPoint', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #icon_path = ':/plugins/mid_point/icon.png'
        icon_path = os.path.join(os.path.dirname(__file__), "icon.png")
        self.add_action(
            icon_path,
            text=self.tr(u'Find the middle point of the line'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Initialize the dialog only if it's the first start
        if self.first_start:
            self.first_start = False
            self.dlg = MidPointDialog()

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Mid Point'),
                action)
            self.iface.removeToolBarIcon(action)

    '''def run(self):
        """Run method that performs all the real work"""
        # Ensure the dialog is initialized before showing it
        if not hasattr(self, 'dlg') or not self.dlg:
            self.dlg = MidPointDialog()

        # show the dialog
        self.dlg.show()
        layers = QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                self.dlg.layerCombo.addItem(layer.name(), layer)
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result == 1:
            # do something useful
            index = self.dlg.layerCombo.currentIndex()
            layer = self.dlg.layerCombo.itemData(index)
            QMessageBox.information(
                self.iface.mainWindow(),
                "hello world",
                "%s has %d features." % (layer.name(), layer.featureCount())
            )'''

        # ... (previous code)

    def run(self):
        """Run method that performs all the real work"""
        # Ensure the dialog is initialized before showing it
        if not hasattr(self, 'dlg') or not self.dlg:
            self.dlg = MidPointDialog()

        # show the dialog
        self.dlg.show()

        # Use QgsProject instead of QgsMapProject
        layers = QgsProject.instance().mapLayers().values()

        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer and layer.geometryType() == QgsWkbTypes.LineGeometry:
                self.dlg.layerCombo.addItem(layer.name(), layer)

        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result == 1:
            # Get the selected layer
            index = self.dlg.layerCombo.currentIndex()
            selected_layer = self.dlg.layerCombo.itemData(index)

            # Check if the selected layer is a vector layer
            if selected_layer.type() == QgsMapLayer.VectorLayer:
                # Create a new memory layer for the midpoints
                midpoints_layer = QgsVectorLayer("Point?crs=" + selected_layer.crs().authid(), "midpoints", "memory")

                # Define the fields for the midpoints layer
                midpoints_layer_data = midpoints_layer.dataProvider()
                midpoints_layer_data.addAttributes([QgsField("ID", QVariant.Int)])

                # Update the fields
                midpoints_layer.updateFields()

                # Iterate through each feature in the input layer
                for feature in selected_layer.getFeatures():
                    # Get the geometry of the current feature
                    geom = feature.geometry()

                    # Check if the geometry is a polyline
                    if geom.type() == QgsWkbTypes.LineGeometry:
                        # Calculate the length of the polyline
                        length = geom.length()

                        # Calculate the midpoint of the length
                        midpoint = geom.interpolate(length / 2)

                        # Create a new feature for the midpoints layer
                        midpoint_feature = QgsFeature()
                        midpoint_feature.setGeometry(midpoint)
                        midpoint_feature.setAttributes([feature.id()])

                        # Add the feature to the midpoints layer
                        midpoints_layer_data.addFeature(midpoint_feature)

                # Save the midpoints layer to a shapefile in the project directory
                project_dir = QgsProject.instance().readPath("./")
                output_shapefile = os.path.join(project_dir, "midpoints.shp")
                QgsVectorFileWriter.writeAsVectorFormat(midpoints_layer, output_shapefile, "utf-8", selected_layer.crs(), "ESRI Shapefile")

                # Load the midpoints layer from the saved shapefile into the QGIS canvas
                midpoints_layer_loaded = QgsVectorLayer(output_shapefile, "midpoints", "ogr")

                if not midpoints_layer_loaded.isValid():
                    print("Error: Failed to load midpoints layer!")
                else:
                    # Set the same CRS as the project
                    midpoints_layer_loaded.setCrs(QgsCoordinateReferenceSystem(selected_layer.crs()))

                    # Add the midpoints layer to the QGIS canvas
                    QgsProject.instance().addMapLayer(midpoints_layer_loaded)
                    print("Midpoints layer created and loaded into the QGIS canvas with the same CRS as the project successfully.")


